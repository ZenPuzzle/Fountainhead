[
    // Override normal ctrl+enter (insert a blank line)
    // { "keys": ["ctrl+enter"], "command": "insert", "args": {"characters": "\n"}, "context":
    //     [
    //         { "key": "auto_complete_visible", "operator": "equal", "operand": false },
    //         { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
    //     ]
    // },

    // Press Shift + Space to move the cursor forward

    { "keys": ["shift+space"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
        [
            // { "key": "following_text", "operator": "regex_contains", "operand": "^[)};'>\"\\]]", "match_all": true },
            { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "setting.forward_cursor", "operator": "equal", "operand": true}
            // sublime.load_settings('Fountainhead.sublime-settings').get('auto_save', True)
        ]
    },

    // Show Character List

    { "keys": ["super+shift+c"], "command": "show_characters", 
    "context":
        [
            { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "setting.characters", "operator": "equal", "operand": true}
        ]
    },

    // Show Scene List

    { "keys": ["super+shift+s"], "command": "show_scenes", 
    "context":
        [
            { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "setting.scenes", "operator": "equal", "operand": true}
        ]
    },


    // Show and Hide Boneyard, Synopses, and Notes

    // Toggles Boneyard
    { "keys": ["ctrl+k", "ctrl+/"], "command": "hide_boneyard", 
    "context":
        [
            { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "setting.fold_text", "operator": "equal", "operand": true}
        ]
    },

    // Toggle Synopses
    { "keys": ["ctrl+k", "ctrl+="], "command": "hide_synopses", 
    "context":
    [
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.fold_text", "operator": "equal", "operand": true}
    ]   },

    // Toggle Notes
    { "keys": ["ctrl+k", "ctrl+["], "command": "hide_notes", 
    "context":
    [
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.fold_text", "operator": "equal", "operand": true}
    ]   },

    // Capitalize current line (while remaining on that line)
    { "keys": ["ctrl+k", "k"], "command": "cap_current_line", 
    "context":
    [
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.cap_current_line", "operator": "equal", "operand": true}
    ]   },

    // Capitalize character names and minor scene headings; doesn't capitalize notes, comments, and title page.
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/CapLine.sublime-macro"}, 
    "context":
    [
        // { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "selector", "operator": "not_equal", "operand": "variable.parameter", "match_all": true },
        { "key": "selector", "operator": "not_equal", "operand": "comment", "match_all": true },
        { "key": "selector", "operator": "not_equal", "operand": "constant.numeric", "match_all": true },
        { "key": "selector", "operator": "not_equal", "operand": "dialogue", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},


    // Automatically insert blank lines where appropriate

    // Insert a blank line after Action.
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/DoubleReturn.sublime-macro"},
    "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "dialogue", "match_all": true },
            { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "[]|!|.|?|_|;|,|:|/|*|\"|-][ \t]*$"},
            { "key": "selector", "operator": "not_equal", "operand": "variable.parameter", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "comment", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "constant.numeric", "match_all": true },
            { "key": "setting.auto_line", "operator": "equal", "operand": true}
        ]
    },

    // Insert a single blank line after Dialogue that is not a complete sentence
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/SingleReturn.sublime-macro"},
    "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "dialogue", "match_all": true },
            { "key": "preceding_text", "operator": "text", "operator": "equal", "operand": "string", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "variable.parameter", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "comment", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "constant.numeric", "match_all": true },
            { "key": "setting.auto_line", "operator": "equal", "operand": true}
        ]
    },

    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/SingleReturn.sublime-macro"},
    "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "dialogue", "match_all": true },
            { "key": "preceding_text", "operator": "text", "operator": "equal", "operand": "dialogue", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "variable.parameter", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "comment", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "constant.numeric", "match_all": true },
            { "key": "setting.auto_line", "operator": "equal", "operand": true}
        ]
    },

    // Insert a blank line after Dialogue.
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/DoubleReturn.sublime-macro"},
    "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "dialogue", "match_all": true },
            { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "[!|.|?|_|*|\"|-][ \t]*$"},
            { "key": "selector", "operator": "not_equal", "operand": "variable.parameter", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "comment", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "constant.numeric", "match_all": true },
            { "key": "setting.dialogue_double_line_space", "operator": "equal", "operand": true}
        ]
    },

    // Move the cursor down a line (Same as pressing the down arrow)
    { "keys": ["shift+enter"], "command": "move", "args": {"by": "lines", "forward": true},
        "context":
            [
                { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
                { "key": "setting.auto_line", "operator": "equal", "operand": true}
            ]
    },

    // Insert a blank line after a transition
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/DoubleReturn.sublime-macro"},
    "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*=|^[ \t]*#|^[ \t]*~|^[ \t]*!"},
            { "key": "setting.auto_line", "operator": "equal", "operand": true}
        ]
    },

    // Single return within Title Page scope
    // { "keys": ["enter"], "command": "run_macro_file", "args": {
    // "file": "Packages/Fountainhead/macros/SingleReturn.sublime-macro"},
    // "context":
    //     [
    //         { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
    //         { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^format[:]|^Format[:]|^title[:]|^Title[:]|^credit[:]|^Credit[:]|^authors[:]|^Authors[:]|^author[:]|^Author[:]|^source[:]|^Source[:]|^draft date[:]|^Draft Date[:]|^Draft date[:]|^contact[:]|^Contact[:]|^copyright[:]|^Copyright[:]|^notes[:]|^Notes[:]"},
    //         { "key": "setting.auto_line", "operator": "equal", "operand": true}
    //     ]
    // },

    // Single return when cursor is on a blank line
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/SingleReturn.sublime-macro"},
    "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^$"},
            { "key": "setting.auto_line", "operator": "equal", "operand": true}
        ]
    },

    // Single return when line starts with @ for Character name
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/SingleReturn.sublime-macro"},
    "context":
        [
            // { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*[@]"},
            { "key": "setting.auto_line", "operator": "equal", "operand": true}
        ]},

    // Single return when line starts with ! for Action
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/SingleReturn.sublime-macro"},
    "context":
        [
            { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*[!]"},
            { "key": "setting.auto_line", "operator": "equal", "operand": true}
        ]},

    // Single return when line starts with ~ for Lyrics dialogue
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/SingleReturn.sublime-macro"},
    "context":
        [
            { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*[~]"},
            { "key": "setting.auto_line", "operator": "equal", "operand": true}
        ]
    },

    // Single return when line is a title page element
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/SingleReturn.sublime-macro"},
    "context":
        [
            { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "constant.numeric", "match_all": true },
            { "key": "setting.auto_line", "operator": "equal", "operand": true}
        ]
    },

    // Single return when line is a dialogue element
    // { "keys": ["enter"], "command": "run_macro_file", "args": {
    // "file": "Packages/Fountainhead/macros/SingleReturn.sublime-macro"},
    // "context":
    //     [
    //         { "key": "auto_complete_visible", "operator": "equal", "operand": false },
    //         { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
    //         { "key": "selector", "operator": "equal", "operand": "string", "match_all": true },
    //         { "key": "setting.auto_line", "operator": "equal", "operand": true}
    //     ]
    // },

    //Capitalize and skip two lines for transition ":"
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/CapScene.sublime-macro"},
    "context":
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": " (?i)(to)[:]$"},
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    //Capitalize and skip two lines for transition "FADE IN:"
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/CapScene.sublime-macro"},
    "context":
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*(?i)(fade in)[:]$"},
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    //Capitalize and skip two lines for transition "FADE OUT."
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/CapScene.sublime-macro"},
    "context":
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*(?i)(fade out)[.]$"},
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    //Capitalize and skip two lines for transition "FADE TO BLACK."
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/CapScene.sublime-macro"},
    "context":
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*(?i)(fade to black)[.]$"},
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    //Capitalize and skip two lines for forced ">" transitions
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/CapScene.sublime-macro"},
    "context":
        [
            { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*>"},
            { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "setting.line_cap", "operator": "equal", "operand": true}
        ]
    },

    // Insert a blank line after centered text
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/DoubleReturn.sublime-macro"},
    "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "<[ \t]*$"},
            { "key": "setting.auto_line", "operator": "equal", "operand": true}
        ]
    },

    // Don't capitalize line if cursor is inside or outside of parentheticals.
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/AddLine.sublime-macro"},
    "context": 
    [
        { "key": "following_text", "operator": "text", "operator": "regex_contains", "operand": "^[)]$", "match_all": true },
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "entity.other.inherited-class", "match_all": true },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/AddLine.sublime-macro"},
    "context": 
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "[)]$", "match_all": true },
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "dialogue", "match_all": true },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    // Don't capitalize line and add single return if cursor is inside or outside notes.
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/AddLine.sublime-macro"},
    "context": 
    [
        { "key": "following_text", "operator": "text", "operator": "regex_contains", "operand": "^[]][]]$", "match_all": true },
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/AddLine.sublime-macro"},
    "context": 
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "[]][]]$", "match_all": true },
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    // Don't capitalize line and add double return if cursor is inside or outside notes.
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/AddDoubleLine.sublime-macro"},
    "context": 
    [
        { "key": "following_text", "operator": "text", "operator": "regex_contains", "operand": "^[]][]]$", "match_all": true },
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true},
        { "key": "setting.note_double_line_space", "operator": "equal", "operand": true}
    ]},

    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/AddDoubleLine.sublime-macro"},
    "context": 
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "[]][]]$", "match_all": true },
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true},
        { "key": "setting.note_double_line_space", "operator": "equal", "operand": true}
    ]},

    // Don't capitalize line and add single return if cursor is inside or outside comments.
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/AddLine.sublime-macro"},
    "context": 
    [
        { "key": "following_text", "operator": "text", "operator": "regex_contains", "operand": "[*][\/]$", "match_all": true },
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/AddLine.sublime-macro"},
    "context": 
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "[*][\/]$", "match_all": true },
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    // Capitalize lines that end in parenthese but have text before them (characters and scene headings)
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/CapLineParentheses.sublime-macro"},
    "context": 
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": ".+[(].*$", "match_all": true },
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "following_text", "operator": "text", "operator": "regex_contains", "operand": "[)]$", "match_all": true },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        // { "key": "selector", "operator": "not_equal", "operand": "foreground", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/CapLineParentheses.sublime-macro"},
    "context": 
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": ".+[(].*[)]$", "match_all": true },
        { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "following_text", "operator": "text", "operator": "regex_contains", "operand": "$", "match_all": true },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        // { "key": "selector", "operator": "not_equal", "operand": "foreground", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    // { "keys": ["enter"], "command": "run_macro_file", "args": {
    // "file": "Packages/Fountainhead/macros/CapLine.sublime-macro"},
    // "context": 
    // [
    //     { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": ".+[(].*[)]$", "match_all": true },
    //     // { "key": "auto_complete_visible", "operator": "equal", "operand": false },
    //     { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
    //     { "key": "setting.line_cap", "operator": "equal", "operand": true}
    // ]},

    // @ Character names that include parenthese have the text within the parenthese capitalized (v.o., o.s., cont'd) but not the character name

    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/atCapLineParentheses.sublime-macro"},
    "context": 
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*@.*[(].*$", "match_all": true },
        // { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "following_text", "operator": "text", "operator": "regex_contains", "operand": "[)]$", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/atCapLineParentheses.sublime-macro"},
    "context": 
    [
        { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*@.*[(].*[)]", "match_all": true },
        // { "key": "auto_complete_visible", "operator": "equal", "operand": false },
        { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
        { "key": "following_text", "operator": "text", "operator": "regex_contains", "operand": "$", "match_all": true },
        { "key": "setting.line_cap", "operator": "equal", "operand": true}
    ]},

    // { "keys": ["enter"], "command": "run_macro_file", "args": {
    // "file": "Packages/Fountainhead/macros/atCapLineParentheses.sublime-macro"},
    // "context": 
    // [
    //     { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*@.*[(].*[)]$", "match_all": true },
    //     // { "key": "auto_complete_visible", "operator": "equal", "operand": false },
    //     { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
    //     { "key": "setting.line_cap", "operator": "equal", "operand": true}
    // ]},

    //Capitalize Scene Headings
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/CapScene.sublime-macro"},
    "context":
        [
            { "key": "preceding_text", "operator": "text", "operator": "regex_contains", "operand": "^[ \t]*(?i)(int)[.]? |^[ \t]*(?i)(int)[.]?/|^[ \t]*(?i)(ext)[.]? |^[ \t]*I/|^[ \t]*(?i)(est)[.]? |^[ \t]*(?i)(i)[.]?/|^[ \t]*[.][A-Za-z0-9]|^[ \t]*[_]?(?i)(flash)"},
            // { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "setting.line_cap", "operator": "equal", "operand": true}
        ]
    },

    // Capitalize Scene while inside brackets, but exclude Notes and Comments.
    { "keys": ["enter"], "command": "run_macro_file", "args": {
    "file": "Packages/Fountainhead/macros/CapSceneBrackets.sublime-macro"},
    "context": 
        [
            { "key": "following_text", "operator": "text", "operator": "regex_contains", "operand": "[]]$", "match_all": true },
            // { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "variable.parameter", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "comment", "match_all": true },
            { "key": "setting.line_cap", "operator": "equal", "operand": true},
            { "key": "selector", "operator": "not_equal", "operand": "string", "match_all": true }
        ]
    },

    //Insert [LINE X]: when appropriate
    { "keys": ["enter"], "command": "run_macro_file", "args": {"file": "Packages/Fountainhead/macros/AfterChoices.sublime-macro"},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "CHOICES:"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },
    { "keys": ["enter"], "command": "insert", "args": {"characters": "\n    [LINE B]: "},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^    \\[LINE A\\]: .*"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },
    { "keys": ["enter"], "command": "insert", "args": {"characters": "\n    [LINE C]: "},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^    \\[LINE B\\]: .*"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },
    { "keys": ["enter"], "command": "insert", "args": {"characters": "\n    [LINE D]: "},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^    \\[LINE C\\]: .*"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },

    //Insert [CON X]: when appropriate
    { "keys": ["enter"], "command": "run_macro_file", "args": {"file": "Packages/Fountainhead/macros/AfterCondition.sublime-macro"},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "CONDITION:"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },
    { "keys": ["enter"], "command": "insert", "args": {"characters": "\n    [CON B]: [["},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^    \\[CON A\\]: .*"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },
    { "keys": ["enter"], "command": "insert", "args": {"characters": "\n    [CON C]: [["},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^    \\[CON B\\]: .*"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },
    { "keys": ["enter"], "command": "insert", "args": {"characters": "\n    [CON D]: [["},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^    \\[CON C\\]: .*"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },

    //Insert [ACTION X]: when appropriate
    { "keys": ["enter"], "command": "run_macro_file", "args": {"file": "Packages/Fountainhead/macros/AfterActions.sublime-macro"},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "ACTIONS:"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },
    { "keys": ["enter"], "command": "insert", "args": {"characters": "\n    [ACTION B]: "},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^    \\[ACTION A\\]: .*"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },
    { "keys": ["enter"], "command": "insert", "args": {"characters": "\n    [ACTION C]: "},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^    \\[ACTION B\\]: .*"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },
    { "keys": ["enter"], "command": "insert", "args": {"characters": "\n    [ACTION D]: "},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^    \\[ACTION C\\]: .*"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },

    // Delete [LINE|CON|ACTION X]: if appropriate
    { "keys": ["enter"], "command": "run_macro_file", "args": {"file": "Packages/Fountainhead/macros/ClearCurrentLine.sublime-macro"},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^    \\[(LINE|CON|ACTION) .\\]: *\\[?\\[?$"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },
    { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Fountainhead/macros/ClearCurrentLine.sublime-macro"},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^    \\[(LINE|CON|ACTION) .\\]: *\\[?\\[?$"},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },

    // Add indent character name
    { "keys": ["enter"], "command": "run_macro_file", "args": {"file": "Packages/Fountainhead/macros/AfterCharacter.sublime-macro"},
    "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*[A-Z]+$", "match_all": true},
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true }
        ]
    },


    // Markdown Text Emphasis

    // Wrap _ around selected text
    { "keys": ["_"], "command": "insert_snippet", "args": {"contents": "_${0:$SELECTION}_"}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "setting.text_emphasis", "operator": "equal", "operand": true}
        ]
    },

    // Wrap [] around selected text
    { "keys": ["["], "command": "insert_snippet", "args": {"contents": "[${0:$SELECTION}]"}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "setting.text_emphasis", "operator": "equal", "operand": true}
        ]
    },

    // Wrap * around selected text
    { "keys": ["*"], "command": "insert_snippet", "args": {"contents": "*${0:$SELECTION}*"}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.fountain", "match_all": true },
            { "key": "setting.text_emphasis", "operator": "equal", "operand": true}
        ]
    }
]
